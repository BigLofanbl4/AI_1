#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import math
from itertools import permutations


def find_path(graph, start, end):
    min_cost = math.inf
    best_path = None

    nodes = list(graph.keys())
    nodes.remove(start)
    nodes.remove(end)

    for combination in permutations(nodes, 3):
        path = [start] + list(combination) + [end]
        cost = 0

        for index, city in enumerate(path):
            if len(path) == index + 1:
                break
            cost += graph[city].get(path[index + 1], math.inf)

        if cost < min_cost:
            min_cost = cost
            best_path = path

    return best_path, min_cost


if __name__ == "__main__":
    graph = {
        "Ставрополь": {
            "Невинномыск": 44,
            "Светлоград": 75,
            "Александровское": 83,
            "Изобильный": 40,
            "Донское": 37,
            "Короткин": 120,
        },
        "Невинномыск": {
            "Ставрополь": 44,
            "Армавир": 74,
            "Черкеск": 70,
            "Отрадная": 44,
            "Курсавка": 48,
        },
        "Светлоград": {"Ставрополь": 75, "Элиста": 156, "Буденовск": 119},
        "Элиста": {"Светлоград": 156, "Арзгир": 103},
        "Пятигорск": {
            "Нальчик": 74,
            "Буденовск": 116,
            "Александровское": 74,
            "Черкеск": 91,
            "Курсавка": 64,
            "Кисловодск": 36,
        },
        "Нальчик": {"Пятигорск": 74},
        "Армавир": {"Невинномыск": 74, "Короткин": 66, "Отрадная": 64},
        "Короткин": {"Армавир": 66, "Ставрополь": 120, "Новоалександровск": 49},
        "Буденовск": {
            "Светлоград": 119,
            "Пятигорск": 116,
            "Арзгир": 64,
            "Александровское": 93,
        },
        "Арзгир": {"Буденовск": 64, "Элиста": 103},
        "Александровское": {
            "Ставрополь": 83,
            "Пятигорск": 74,
            "Буденовск": 93,
            "Курсавка": 48,
        },
        "Черкеск": {
            "Невинномыск": 70,
            "Пятигорск": 91,
            "Удобная": 38,
            "Карачаевск": 50,
        },
        "Изобильный": {
            "Ставрополь": 40,
            "Донское": 20,
            "Новоалександровск": 39,
        },
        "Донское": {"Ставрополь": 37, "Изобильный": 20},
        "Новоалександровск": {"Изобильный": 39, "Короткин": 49},
        "Отрадная": {"Армавир": 64, "Невинномыск": 44, "Удобная": 23},
        "Удобная": {"Отрадная": 23, "Черкеск": 38},
        "Курсавка": {"Невинномыск": 48, "Пятигорск": 64, "Александровское": 48},
        "Карачаевск": {"Черкеск": 50, "Кисловодск": 71},
        "Кисловодск": {"Карачаевск": 71, "Пятигорск": 36},
    }

    start = "Ставрополь"
    end = "Пятигорск"

    best_path, best_cost = find_path(graph, start, end)

    print("Лучший путь:", best_path)
    print("Лучшая цена:", best_cost)
